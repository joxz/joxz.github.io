{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blog","text":""},{"location":"randomnotes/","title":"random notes","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#azfw","title":"azfw","text":"<ul> <li>Troubleshooting failed IP group that causes an AzureFirewall to fail</li> </ul>"},{"location":"tags/#azure-policy","title":"azure-policy","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> <li>Deploy Qualys Cloud Agent with Azure Policy</li> </ul>"},{"location":"tags/#dsc","title":"dsc","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> </ul>"},{"location":"tags/#guestconfiguration","title":"guestconfiguration","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> </ul>"},{"location":"tags/#ipgroup","title":"ipgroup","text":"<ul> <li>Troubleshooting failed IP group that causes an AzureFirewall to fail</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> <li>Azure VM Agent and Extension Logs</li> <li>Zscaler Tunnels on Azure - Part 2 - Linux IPSec</li> </ul>"},{"location":"tags/#qualys","title":"qualys","text":"<ul> <li>Deploy Qualys Cloud Agent with Azure Policy</li> </ul>"},{"location":"tags/#vm-extensions","title":"vm-extensions","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> <li>Azure VM Agent and Extension Logs</li> <li>Deploy Qualys Cloud Agent with Azure Policy</li> </ul>"},{"location":"tags/#vpn","title":"vpn","text":"<ul> <li>Zscaler Tunnels on Azure - Part 2 - Linux IPSec</li> <li>Zscaler Tunnels on Azure - Part 1 - VPN Gateway</li> </ul>"},{"location":"tags/#zscaler","title":"zscaler","text":"<ul> <li>Zscaler Tunnels on Azure - Part 2 - Linux IPSec</li> <li>Zscaler Tunnels on Azure - Part 1 - VPN Gateway</li> </ul>"},{"location":"2023-07-04-az-guestconfig-p1/","title":"Azure Policy Guest Configuration for Linux - Part 1","text":"<p>I'm currently checking out  Azure Policy Guest Configuration for Linux VMs and will note down my progress made here. The whole process took me a while to understand, also I haven't used DSC before. Learning on the fly!</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#objectives","title":"Objectives","text":"<ul> <li>Audit that a user is present on the system</li> <li>Audit that a file with specific content is present in a specific path</li> <li>Audit that a service is running</li> <li>Continuous remediation of non-compliant systems</li> </ul> <p>Everything is available in this Github repo:  https://github.com/joxz/guestconfiguration-linux</p> <p>Notes</p> <ul> <li>The name is now changing to Azure Automanage Machine Configuration</li> <li>Most documentations show Windows configurations which seem easier to achieve, I'll take a look at those later</li> <li>Predefined Linux DSC resources seem limited, might need to check out how to develop those myself</li> <li>For Linux VMs it's also possible to use Chef InSpec instead of DSC</li> </ul>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#prerequisites-for-guest-configuration","title":"Prerequisites for Guest Configuration","text":"<ul> <li> Azure Linux VM with supported OS<sup>5</sup></li> <li> System-assigned managed identity enabled on the VM</li> <li> VM extension <code>AzurePolicyforLinux</code> installed<sup>1</sup></li> </ul>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#dev-environment","title":"Dev Environment","text":"<p>Due to the <code>GuestConfiguration</code> powershell module only being available for Ubuntu 18.04<sup>6</sup>, a  dev container for vscode is an easy solution to set up a proper dev environment to author guest configuration policies.</p> <p>Please check requirements for this feature on the vscode page. Another solution could for example be to use a  VS Code Server and  Remote Tunnels on a dev server. VSCode luckily offers a lot of solutions!</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#dev-container-image","title":"Dev Container Image","text":"<p>The docker image uses Powershell 7.2 LTS, Ubuntu 18.04 as OS and installs the module <code>PSDesiredStateConfiguration</code> in version <code>3.0.0-beta1</code> which is needed to author guestconfiguration policies for Linux <sup>2</sup></p> <p>Some additional packages are installed as devcontainer features<sup>3</sup>:</p> <ul> <li>Oh-my-ZSH</li> <li>VSCode Powershell extension </li> <li>Git</li> <li>Azure CLI</li> </ul>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#dev-container-setup","title":"Dev Container Setup","text":"<ul> <li>Clone the repo or  copy <code>devcontainer.json</code> and <code>Dockerfile</code> to directory <code>.devcontainer</code></li> <li>Install <code>devcontainer CLI</code> in vscode   https://code.visualstudio.com/docs/devcontainers/devcontainer-cli</li> <li>Run <code>devcontainer build</code> to build the container</li> <li>Run <code>devcontainer up</code> to start the container</li> <li>Run <code>devcontainer open</code> to open vscode in the newly created dev environment</li> </ul> <p>Version Outputs:</p> <pre><code>PS /workspaces/guestconfiguration-linux/guestconfiguration&gt; Get-nxDistributionInfo                                      \n\nVERSION             : 18.04.6 LTS (Bionic Beaver)\nID                  : ubuntu\nDISTRIB_ID          : Ubuntu\nVERSION_ID          : 18.04\nNAME                : Ubuntu\n\nPS /workspaces/guestconfiguration-linux/guestconfiguration&gt; $psversiontable\n\nName                           Value\n----                           -----\nPSVersion                      7.2.12\nPSEdition                      Core\nGitCommitId                    7.2.12\nOS                             Linux 5.15.49-linuxkit-pr #1 SMP PREEMPT Thu May 25 07:27:39 UTC 2023\n\nPS /workspaces/guestconfiguration-linux/guestconfiguration&gt; get-installedmodule -name PSDesiredStateconfiguration\n\nVersion              Name                                Repository           Description\n-------              ----                                ----------           -----------\n3.0.0-beta1          PSDesiredStateConfiguration         PSGallery            PowerShell Desired State Configuration\n</code></pre>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#authoring-a-guest-configuration","title":"Authoring a Guest Configuration","text":"<p>The first example will be a GC policy to audit that a file exists in the given directory, and to create it if it doesn't exist (<code>DeployIfNotExists</code> policy)</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#guest-configuration-package-module","title":"Guest Configuration Package Module","text":"<p> Sampler provides an easy way to create a module that can be used with Guest Configuration<sup>4</sup>. currently some manual steps are necessary to achieve this, please follow the steps described in the Sampler docs  here. </p> <p>Important</p> <p>Please make sure to call all the folders, DSC resources, DSC nodes etc only like the package name <code>GCFilePresent</code>. I still need to figure out if that's really needed and how all the names and outputs are connected, but that's for later</p> <p>Info</p> <p>Use the dev container terminal for the commands below.</p> <pre><code>$newSampleModuleParameters = @{\n   DestinationPath   = '.'\n   ModuleType        = 'dsccommunity'\n   ModuleName        = 'GCFilePresent'\n   ModuleAuthor      = 'GCFilePresent'\n   ModuleDescription = 'Ensure file exists in the directory with specified content'\n}\n\nNew-SampleModule @newSampleModuleParameters\n</code></pre> <p>Require additional modules in <code>RequiredModules.psd1</code>:</p> <pre><code>nxtools = 'latest'\nGuestConfiguration = @{\n      Version = 'latest'\n      Parameters = @{\n            AllowPrerelease = $true\n      }\n   }\nPSDesiredStateConfiguration = @{\n      Version = '3.0.0-beta1'\n      Parameters = @{\n            AllowPrerelease = $true\n      }\n   }\n</code></pre> <p>Add build task and releaseasset in <code>build.yaml</code>:</p> <pre><code> pack:\n    - build\n    - package_module_nupkg\n    - gcpack\n\nGitHubConfig:\n  GitHubFilesToAdd:\n    - 'CHANGELOG.md'\n  ReleaseAssets:\n    - output/GCPolicyPackages/GCFilePresent*.zip\n</code></pre> <p>Info</p> <p>Not describing all the steps, for detailed steps check  here</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#guest-configuration-package-authoring","title":"Guest Configuration Package Authoring","text":"<p>Create the necessary directories and the DSC configuration file:</p> <p><code>source/GCPackages/GCFilePresent/GCFilePresent.config.ps1</code></p> <p>Add the following content to <code>GCFilePresent.config.ps1</code></p> <pre><code>Configuration GCFilePresent {\n    Import-DSCResource -ModuleName nxtools\n\n    Node GCFilePresent {\n        NxFile 'GCFilePresent' {\n            Ensure = 'Present'\n            DestinationPath = '/tmp/00dummy.txt'\n            Contents = 'TESTTESTTESTTESTTESTTESTTESTTESTTESTTESTTESTTEST'\n            Type = 'File'\n            Force = $true\n            Mode = '0777'\n            Owner = 'root'\n            Group = 'root'\n        }\n    }\n}\n\nGCFilePresent\n</code></pre> <p>This configuration uses the predefined <code>nxtools</code>  DSC resource <code>NxFile</code> to check if the file with content is present. If the target file doesn't exist exactly like described in the configuration (content, path, permissions), it will be created or modified.</p> Tip <p>To get rid of the <code>constrainedLanguage</code> vscode error in the dev container, import DSC with <code>import-module PSDesiredStateConfiguration</code> in the container terminal.</p> <p></p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#guest-configuration-package-building","title":"Guest Configuration Package Building","text":"<p>Resolve dependencies first: </p> <pre><code>cd /workspaces/guestconfiguration-linux/guestconfiguration/GCFilePresent\n./build.ps1 -Tasks noop -ResolveDependency\n</code></pre> <p>Import modules and enable experimental features (\ud83d\udcad not yet sure why/if those experimental features are necessary):</p> <pre><code>Import-Module GuestConfiguration\nimport-module PSDesiredStateconfiguration\nEnable-ExperimentalFeature -Name GuestConfiguration.Pester\nEnable-ExperimentalFeature -Name GuestConfiguration.SetScenario\nEnable-ExperimentalFeature -Name PSDesiredStateConfiguration.InvokeDscResource -ErrorAction SilentlyContinue\n</code></pre> <p>Build the Guest Configuration Package:</p> <pre><code>./build.ps1 -Task gcpack\n\n&lt;truncated&gt;\n        Packaging Guest Configuration Package 'GCFilePresent'\n         Creating GC Package from Configuration file: '/workspaces/guestconfiguration-linux/guestconfiguration/GCFilePresent/source/GCPackages/GCFilePresent/GCFilePresent.config.ps1'\n         Compiled '/workspaces/guestconfiguration-linux/guestconfiguration/GCFilePresent/GCFilePresent/GCFilePresent.mof'.\n         Zips created, you may want to delete the unzipped folders under 'GCPackages'...\n         Renaming Zip as '/workspaces/guestconfiguration-linux/guestconfiguration/GCFilePresent/output/GCPackages/GCFilePresent_0.0.1.zip'.\n        Zipped Guest Config Package: /workspaces/guestconfiguration-linux/guestconfiguration/GCFilePresent/output/GCPackages/GCFilePresent_0.0.1.zip\nDone /gcpack/build_guestconfiguration_packages 00:00:07.3095573\nDone /gcpack 00:00:11.5022001\nBuild succeeded. 11 tasks, 0 errors, 0 warnings 00:00:12.7656214\n</code></pre> <p>The package zip file is located in <code>/workspaces/guestconfiguration-linux/guestconfiguration/GCFilePresent/output/GCPackages/GCFilePresent_0.0.1.zip</code></p> <p>The resulting zip file can be used in the next part to create the Guest Configuration Policy!</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-04-az-guestconfig-p1/#resources","title":"Resources","text":"<p>A list of resources I used to research this topic:</p> <ul> <li> Understand the machine configuration feature of Azure Automanage</li> <li> Audit server settings with Azure Policy Guest Configuration</li> <li> Persistence with Azure Policy Guest Configuration</li> <li> Azure Guest Policy Configuration \u2013 A look behind the curtain</li> <li> Writing a custom DSC resource with PowerShell classes</li> <li> nxtools</li> <li> Writing DSC Resources for Azure Policy Guest Configuration - For Linux! by Gael Colas</li> </ul> <ol> <li> <p> Install the extension \u21a9</p> </li> <li> <p> Author a configuration \u21a9</p> </li> <li> <p> Dev Container Features reference \u21a9</p> </li> <li> <p> GCPackage scaffolding \u21a9</p> </li> <li> <p> Supported client types \u21a9</p> </li> <li> <p> Base requirements \u21a9</p> </li> </ol>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-07-az-guestconfig-p2/","title":"Azure Policy Guest Configuration for Linux - Part 2","text":"<p>Continuation of the first part of this series. The Guest Configuration Package is now ready to be tested and deployed!</p> <p>Make sure you're signed in to Azure in the dev container <code>pwsh</code> session for this part:</p> <pre><code>\u279c Connect-AzAccount -DeviceCode\n\u279c Set-AzContext -subscription {subscriptionname}\n</code></pre>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-07-az-guestconfig-p2/#test-and-verify-package","title":"Test and Verify Package","text":"<p>Package can be tested with:</p> <pre><code>\u279c Get-GuestConfigurationPackageComplianceStatus -path './output/GCPackages/GCFilePresent_0.0.1.zip'\n\nadditionalProperties : {}\nassignmentName       : GCFilePresent\ncomplianceStatus     : False\nendTime              : 7/3/2023 8:24:59 PM\njobId                : f9d51551-22d6-4743-92ad-1ced0021cca1\noperationtype        : Consistency\nresources            : {@{complianceStatus=False; properties=; reasons=System.Object[]}}\nstartTime            : 7/3/2023 8:24:32 PM\n</code></pre> <p><code>complianceStatus</code> should equal <code>False</code> on a new system</p> <p>Test remediation:</p> <pre><code>\u279c Start-GuestConfigurationPackageRemediation -path './output/GCPackages/GCFilePresent_0.0.1.zip'\n\nadditionalProperties : {}\nassignmentName       : GCFilePresent\ncomplianceStatus     : True\nendTime              : 7/3/2023 8:25:59 PM\njobId                : dcdb25e6-e760-4e7b-8e1a-f33c8ece59d5\noperationtype        : Consistency\nresources            : {@{complianceStatus=True; properties=; reasons=System.Object[]}}\nstartTime            : 7/3/2023 8:25:26 PM\n</code></pre> <p><code>complianceStatus</code> is reported back as <code>True</code> and can be double checked with the same <code>Get-GuestConfigurationPackageComplianceStatus</code> as above. Also, check for the file in <code>/tmp</code>:</p> <pre><code>\u279c cat /tmp/00dummy.txt\nTESTTESTTESTTESTTESTTESTTESTTESTTESTTESTTESTTEST\n</code></pre>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-07-az-guestconfig-p2/#publishing-the-package","title":"Publishing the Package","text":"<p>To publish the package, a storage account is needed ( communication via private endpoints is supported), and the package must be uploaded to blob storage. Please follow the steps outlined  here on how to do that.</p> <p>The resulting blob URL stored in <code>$contentUri</code> you need for the next step should look like this:</p> <pre><code>URL template:\nhttps://{storageaccountname}.blob.core.windows.net/{containername}/{filename}?{sas-token}\n\nReal URL:\nhttps://gcpolpackages46282.blob.core.windows.net/guestconfiguration/GCFilePresent_0.0.1.zip?sv=2022-11-02&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupiytfx&amp;se=2023-07-22T14:31:11Z&amp;st=2023-07-03T06:31:11Z&amp;spr=https&amp;sig=QwD2COOrgdsjbkteKau00%2B5duy4sbkT5JSykQp21ke8%3D\n\n\u279c $contenturi\nhttps://gcpolpackages46282.blob.core.windows.net/guestconfiguration/GCFilePresent_0.0.1.zip?sv=2022-11-02&amp;ss=bfqt&amp;srt=sco&amp;sp=rwdlacupiytfx&amp;se=2023-07-22T14:31:11Z&amp;st=2023-07-03T06:31:11Z&amp;spr=https&amp;sig=QwD2COOrgdsjbkteKau00%2B5duy4sbkT5JSykQp21ke8%3D\n</code></pre> <p>Warning</p> <p>SAS token lifetime, even if it is set to 3 years in the docs, is something that needs to be tracked and taken care of manually</p> <p>Please make sure the <code>$contentUri</code> variable is set correctly</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-07-az-guestconfig-p2/#create-a-policy-definition","title":"Create a Policy Definition","text":"<p>Detailed explanations for this step are available  here</p> <pre><code>\u279c $policyid = $(new-guid)\n\n\u279c $PolicyConfig      = @{\n    PolicyId      = $policyid\n    ContentUri    = $contenturi\n    DisplayName   = 'GCFilePresent'\n    Description   = 'Ensures a specific file is present'\n    Path          = './policies/'\n    Platform      = 'Linux'\n    PolicyVersion = '1.0.0'\n    Mode          = 'ApplyAndAutoCorrect'\n  }\n\n\u279c New-GuestConfigurationPolicy @PolicyConfig\n\nName          Path                                                                                                                PolicyId\n----          ----                                                                                                                --------\nGCFilePresent /workspaces/guestconfiguration-linux/guestconfiguration/GCFilePresent/policies/GCFilePresent_DeployIfNotExists.json d0403c9a-42c0-4df0-a125-41ca046987e4\n</code></pre> <p>This will create a policy definition in <code>policies/GCFilePresent_DeployIfNotExists.json</code></p> <p>Info</p> <p><code>Mode = 'ApplyAndAutoCorrect'</code> creates a <code>DeployIfNotExists</code> policy. That means, the policy needs to create a managed identity with the assignment so it has the permissions (<code>Guest Configuration Resource Contributor</code>) to create remediation tasks</p> <p>Note</p> <p> Using parameters in custom machine configuration policy definitions did not work for me, it would always require the <code>ResourcePropertyValue</code> parameter. Setting this parameter would kill the whole parameterization idea. This is probably an error in the module, or I'm missing/overseeing something...</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-07-az-guestconfig-p2/#register-policy-definition","title":"Register Policy Definition","text":"<pre><code>\u279c New-AzPolicyDefinition -Name 'GC Ensures file is present' -Policy '.\\policies\\GCFilePresent_DeployIfNotExists.json'\n\nName               : GC Ensures file is present\nResourceId         : /subscriptions/{subscriptionid}/providers/Microsoft.Authorization/policyDefinitions/GC Ensures file is present\nResourceName       : GC Ensures file is present\nResourceType       : Microsoft.Authorization/policyDefinitions\nSubscriptionId     : {subscriptionid}\nProperties         : Microsoft.Azure.Commands.ResourceManager.Cmdlets.Implementation.Policy.PsPolicyDefinitionProperties\nPolicyDefinitionId : /subscriptions/{subscriptionid}/providers/Microsoft.Authorization/policyDefinitions/GC Ensures file is present\n</code></pre> <p>The policy is now ready to be assigned!</p> <p>In the next part we will take a look at the policy dashboard, VM agent, how fast remediation sets in and test everything on a Linux VM</p>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-07-07-az-guestconfig-p2/#more-resources","title":"More Resources","text":"<ul> <li> Policy Lifecycle</li> <li> Remix with a Twist: 7 steps to author, develop, and deploy custom recommendations for Windows using Guest Configuration</li> <li> Azure Governance: how to control system configurations in hybrid and multicloud environments</li> </ul>","tags":["azure-policy","vm-extensions","guestconfiguration","dsc","linux"]},{"location":"2023-11-22-az-vmextension-logs/","title":"Azure VM Agent and Extension Logs","text":"<p>This is a collection of links and file locations used to troubleshoot various Azure VM extensions or agents. Mainly done so I don't have to google it everytime</p> <p> Azure virtual machine extensions and features</p>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#azure-windows-vm-agent-waagent","title":"Azure Windows VM Agent / waagent","text":"WindowsLinux <p>Quote</p> <p>The Microsoft Azure Windows VM Agent is a secure, lightweight process that manages virtual machine (VM) interaction with the Azure fabric controller. The Azure Windows VM Agent has a primary role in enabling and executing Azure virtual machine extensions. VM extensions enable post-deployment configuration of VMs, such as installing and configuring software. VM extensions also enable recovery features such as resetting the administrative password of a VM. Without the Azure Windows VM Agent, you can't run VM extensions.</p> <p>Quote</p> <p>The Microsoft Azure Linux VM Agent (waagent) manages Linux and FreeBSD provisioning, along with virtual machine (VM) interaction with the Azure fabric controller. In addition to the Linux agent providing provisioning functionality, Azure provides the option of using cloud-init for some Linux operating systems.</p> <p> https://github.com/Azure/WindowsVMAgent</p> <p> https://github.com/Azure/WALinuxAgent</p> <p> https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/agent-windows</p> <p> https://learn.microsoft.com/en-us/troubleshoot/azure/virtual-machines/windows-azure-guest-agent</p> <p> https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/troubleshoot</p> WindowsLinux Name Location Name <code>VMAgent</code> (1) Log file <code>C:\\WindowsAzure\\Logs\\WaAppAgent.log</code> Installer logs <code>C:\\WindowsAzure\\Logs\\TransparentInstaller.log</code> Extension logs <code>C:\\WindowsAzure\\Logs\\Plugins\\</code> Extension config <code>C:\\Packages\\Plugins\\</code> <ol> <li> <p> Note: The Windows process is called <code>WindowsAzureGuestAgent.exe</code></p> </li> </ol> Name Location Name <code>WALinuxAgent</code> Config file <code>/etc/waagent.conf</code> Log file <code>/var/log/waagent.log</code> Extension logs <code>/var/log/azure/&lt;extensionName&gt;</code> Extension binaries <code>/var/lib/waagent/&lt;extensionName&gt;</code> Verify agent is running <code>systemctl status walinuxagent</code> journald logs <code>journalctl -u walinuxagent</code>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#azure-arc-connected-machine-agent","title":"Azure Arc Connected Machine Agent","text":"<p> https://learn.microsoft.com/en-us/azure/azure-arc/servers/agent-overview</p> <p> https://learn.microsoft.com/en-us/azure/azure-arc/servers/troubleshoot-agent-onboard</p> <p> https://learn.microsoft.com/en-us/azure/azure-arc/servers/troubleshoot-vm-extensions#general-troubleshooting</p> <p> https://learn.microsoft.com/en-us/azure/azure-arc/servers/azcmagent-check</p> <p> https://learn.microsoft.com/en-us/azure/azure-arc/servers/agent-overview#agent-resources</p> WindowsLinux Name Location Connected Machine Agent log <code>%ProgramData%\\AzureConnectedMachineAgent\\Log\\azcmagent.log</code> Hybrid Instance Metadata Service (himds) log (2) <code>%ProgramData%\\AzureConnectedMachineAgent\\Log\\himds.log</code> Guest agent log <code>%SystemDrive%\\ProgramData\\GuestConfig\\ext_mgr_logs</code> Specific extension logs <code>%SystemDrive%\\ProgramData\\GuestConfig\\extension_logs\\&lt;Extension&gt;</code> Download path for VM extensions <code>%SystemDrive%\\%ProgramFiles%\\AzureConnectedMachineAgent\\ExtensionService\\downloads</code> Extension install dir <code>%SystemDrive%\\Packages\\Plugins\\&lt;extension&gt;</code> (1) <ol> <li> Note: Same path as the <code>WindowsAzureGuestAgent</code> installs extensions to</li> <li>  Metadata information  about a connected machine is collected after the Connected Machine agent registers with Azure Arc-enabled servers</li> </ol> <p>Collect all logs and store in a ZIP file:</p> <pre><code>azcmagent logs --full --output \"C:\\temp\\azcmagent-logs.zip\"\n</code></pre> Name Location Connected Machine Agent log <code>/var/opt/azcmagent/log/azcmagent.log</code> Hybrid Instance Metadata Service (himds) log (2) <code>/var/opt/azcmagent/log/himds.log</code> Guest agent log <code>/var/lib/GuestConfig/ext_mgr_logs</code> Specific extension logs <code>/var/lib/GuestConfig/extension_logs/</code> Download path for VM extensions <code>/opt/GC_Ext/downloads</code> Extension install dir <code>/var/lib/waagent/&lt;extension&gt;</code> (1) <ol> <li> Note: Same path as the <code>WALinuxAgent</code> installs extensions to</li> <li>  Metadata information  about a connected machine is collected after the Connected Machine agent registers with Azure Arc-enabled servers</li> </ol> <p>Collect all logs and store in a ZIP file</p> <pre><code>azcmagent logs --full --output \"/tmp/azcmagent-logs.zip\"\n</code></pre> <p>Agent connectivity check:</p> <pre><code>azcmagent check --location \"westeurope\" -v\n</code></pre>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#azure-monitor-agent","title":"Azure Monitor Agent","text":"<p> https://learn.microsoft.com/en-us/azure/azure-monitor/agents/azure-monitor-agent-troubleshoot-linux-vm</p> <p> https://learn.microsoft.com/en-us/azure/azure-monitor/agents/use-azure-monitor-agent-troubleshooter</p> <p> https://learn.microsoft.com/en-us/azure/azure-monitor/agents/agents-overview</p> <p> https://learn.microsoft.com/en-us/azure/azure-monitor/agents/azure-monitor-agent-data-collection-endpoint</p> <p>Info</p> <p>A system-assigned or user-assigned managed identity is necessary for the agent to work</p> WindowsLinux Name Location Extension name <code>AzureMonitorWindowsAgent</code> Runtime logs <code>C:\\Resources\\Azure Monitor Agent\\</code> Binary store <code>C:\\Program Files\\Azure Monitor Agent\\</code> Run installation with logging enabled <code>Msiexec /I AzureMonitorAgentClientSetup.msi /L*V &lt;logfilename&gt;</code> <p>Run Windows Troubleshooter:</p> <pre><code>cd \"C:\\Packages\\Plugins\\Microsoft.Azure.Monitor.AzureMonitorWindowsAgent\\{version}\\Troubleshooter\"\nAgentTroubleshooter --ama\n</code></pre> Name Location Extension name <code>AzureMonitorLinuxAgent</code> Core agent logs <code>/var/opt/microsoft/azuremonitoragent/log/mdsd.*</code> Download location for DCRs <code>/etc/opt/microsoft/azuremonitoragent/config-cache/configchunks/</code> Configuration store <code>/etc/opt/microsoft/azuremonitoragent/config-cache/configchunks/</code> Verify agent is running <code>systemctl status azuremonitoragent</code> <p>Run Linux Troubleshooter:</p> <pre><code>cd /var/lib/waagent/Microsoft.Azure.Monitor.AzureMonitorLinuxAgent-{version}/ama_tst\nsudo sh ama_troubleshooter.sh -A\n\n# create zip file with logs (you'll be asked for a file location to create the zip file):\nsudo sh ama_troubleshooter.sh -A L\n</code></pre>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#guest-configuration-extension","title":"Guest Configuration Extension","text":"<p> https://learn.microsoft.com/en-us/azure/governance/machine-configuration/overview</p> <p> https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/guest-configuration</p> <p> https://learn.microsoft.com/en-us/azure/governance/machine-configuration/agent-release-notes</p> <p> https://github.com/Azure/azure-policy/tree/master/built-in-policies/policySetDefinitions/Guest%20Configuration</p> <p> https://github.com/Azure/azure-policy/tree/master/samples/GuestConfiguration/package-samples/resource-modules</p> <p> https://github.com/azure/nxtools#getting-started</p> <p>Info</p> <p>A system-assigned managed identity is necessary for the agent to work</p> WindowsLinux Name Location Extension name <code>AzurePolicyforWindows</code> Client log files Azure VM <code>C:\\ProgramData\\GuestConfig\\gc_agent_logs\\gc_agent.log</code> Client log files Arc <code>C:\\ProgramData\\GuestConfig\\arc_policy_logs\\gc_agent.log</code> Agent files (1) <code>C:\\ProgramData\\guestconfig\\configuration\\</code> <ol> <li>The machine configuration agent downloads content packages to a machine and extracts the contents</li> </ol> Name Location Extension name <code>AzurePolicyforLinux</code> Client log files Azure VM <code>/var/lib/GuestConfig/gc_agent_logs/gc_agent.log</code> Client log files Arc <code>/var/lib/GuestConfig/arc_policy_logs/gc_agent.log</code> Agent files (1) <code>/var/lib/GuestConfig/Configuration/</code> <ol> <li>The machine configuration agent downloads content packages to a machine and extracts the contents</li> </ol>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#custom-script-extension","title":"Custom Script Extension","text":"<p> https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/custom-script-linux</p> <p> https://github.com/Azure/custom-script-extension-linux</p> WindowsLinux Name Location Extension name <code>CustomScriptExtension</code> Extension output filepath <code>C:\\WindowsAzure\\Logs\\Plugins\\Microsoft.Compute.CustomScriptExtension\\</code> Extension file download path <code>C:\\Packages\\Plugins\\Microsoft.Compute.CustomScriptExtension\\1.*\\Downloads\\&lt;n&gt;</code> (1) <ol> <li>In the preceding path, <code>&lt;n&gt;</code> is a decimal integer that might change between executions of the extension. The <code>1.*</code> value matches the actual, current typeHandlerVersion value of the extension. For example, the actual directory could be <code>C:\\Packages\\Plugins\\Microsoft.Compute.CustomScriptExtension\\1.8\\Downloads\\2</code>. Read   here</li> </ol> Name Location Extension name <code>customScript</code> waagent logs containing <code>customScript</code> <code>sudo cat /var/log/waagent.log | grep \"Microsoft.Azure.Extensions.customScript</code> Extension logs <code>/var/log/azure/custom-script/handler.log</code> Extension file download path <code>/var/lib/waagent/custom-script/download/0/</code>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#dependency-agent","title":"Dependency Agent","text":"<p>https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/agent-dependency-windows</p> <p>https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/agent-dependency-linux</p> WindowsLinux Name Location Extension name <code>DependencyAgentWindows</code> Extension logs <code>C:\\WindowsAzure\\Logs\\Plugins\\Microsoft.Azure.Monitoring.DependencyAgent\\</code> Name Location Extension name <code>DependencyAgentLinux</code> Extensions logs <code>/var/opt/microsoft/dependency-agent/log/install.log</code>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#network-watcher-extension","title":"Network Watcher Extension","text":"<p> https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/network-watcher-linux</p> <p> https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/network-watcher-windows</p> <p> https://learn.microsoft.com/en-us/azure/virtual-machines/extensions/network-watcher-update</p> WindowsLinux Name Location Extension name <code>NetworkWatcherAgentWindows</code> Extension logs <code>C:\\WindowsAzure\\Logs\\Plugins\\Microsoft.Azure.NetworkWatcher.NetworkWatcherAgentWindows\\</code> Name Location Extension name <code>NetworkWatcherAgentLinux</code>","tags":["vm-extensions","linux"]},{"location":"2023-11-22-az-vmextension-logs/#qualys-vm-extension","title":"Qualys VM extension","text":"<p>Please also see  the article on how to deploy the Qualys extension with Azure Policy</p> WindowsLinux Name Location Extension name <code>QualysAgent</code> Agent logs <code>C:\\WindowsAzure\\Logs\\Qualys.QualysAgent\\3.1.3.34\\Asclog.txt</code> Agent installer <code>C:\\Packages\\Plugins\\Qualys.QualysAgent\\3.1.3.34\\</code> Name Location Extension name <code>QualysAgentLinux</code> Agent logs <code>/var/log/qualys/qualys-cloud-agent.log</code> Extension logs <code>/var/log/azure/Qualys.QualysAgentLinux/lxagent.log</code> Install directory <code>/usr/local/qualys/cloud-agent/bin</code> Install scripts <code>/var/lib/waagent/Qualys.QualysAgentLinux-1.6.1.4/bin/avme_install.sh</code> Config files <code>/etc/qualys/cloud-agent/</code>","tags":["vm-extensions","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/","title":"Zscaler Tunnels on Azure - Part 2 - Linux IPSec","text":"<p>In my last post, I created a IPSec tunnel to Zscaler using Azure VPN Gateway. Unfortunately, this setup does not work in a Virtual WAN environment, because  spoke Vnets can't have Vnet gateways. Using VWAN VPN Gateways would make the VPN tunnel a branch, which is not what we need (I also want to avoid routing Public IPs internally).</p> <p>Another option would be to use the Linux server to do the DNAT and IPSec tunnel, so this is what we will explore here.</p>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#target-setup","title":"Target Setup","text":"","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#prerequisites","title":"Prerequisites","text":"<ul> <li>Necessary Azure resources: RG, Vnet, Subnet,...</li> <li>Linux server with a public IP</li> <li>For multiple servers, each server needs it's own public IP attached, Public Azure load balancer does not work</li> <li>Zscaler VPN prerequisites (Static IP, VPN Credentials (PSK), Location)</li> <li>NSG to open UDP ports <code>500</code>, <code>4500</code> from the internet</li> <li>IP Forwarding enabled for the VM NIC resource</li> </ul> <p>Note: Port <code>10101</code> is a Zscaler Dedicated Proxy Port (DPP)<sup>5</sup>, but also all other available Zscaler ports<sup>6</sup> (e.g. 80, 443, 9400, 9480 and 9443) can be used</p>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#ipsec-on-linux","title":"IPSec on Linux","text":"<p>There are multiple options for building IPSec tunnels in Linux: e.g.  Libreswan,  Strongswan,  Openswan</p> <p>For no particular reason, we will build the site-to-site tunnel with Libreswan<sup>4</sup> in this example.</p> <pre><code>sudo apt install libreswan -y\n</code></pre> <pre><code>sudo ipsec verify\n\nVerifying installed system and configuration files\n\nVersion check and ipsec on-path                     [OK]\nLibreswan 3.32 (netkey) on 5.15.0-1034-azure\nChecking for IPsec support in kernel                [OK]\n NETKEY: Testing XFRM related proc values\n         ICMP default/send_redirects                [OK]\n         ICMP default/accept_redirects              [OK]\n         XFRM larval drop                           [OK]\nPluto ipsec.conf syntax                             [OK]\nChecking rp_filter                                  [OK]\nChecking that pluto is running                      [OK]\n Pluto listening for IKE on udp 500                 [OK]\n Pluto listening for IKE/NAT-T on udp 4500          [OK]\n Pluto ipsec.secret syntax                          [OK]\nChecking 'ip' command                               [OK]\nChecking 'iptables' command                         [OK]\nChecking 'prelink' command does not interfere with FIPS [OK]\nChecking for obsolete ipsec.conf options            [OK]\n</code></pre>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#linux-sysctl-settings","title":"Linux sysctl Settings","text":"<pre><code># /etc/sysctl.d/99-dnat.conf\nnet.ipv4.ip_forward=1\nnet.ipv6.conf.all.forwarding=1\nnet.ipv4.conf.*.accept_redirects = 0\nnet.ipv4.conf.*.send_redirects = 0\nnet.ipv6.conf.all.accept_redirects = 0\nnet.ipv6.conf.default.accept_redirects = 0\nnet.ipv4.ip_local_port_range=2048 65535\n</code></pre> <p><code>net.ipv4.ip_local_port_range=2048 65535</code> extends the standard SNAT port range (~28000 ports on Ubuntu 22.04) to prevent SNAT port exhaustion<sup>3</sup></p>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#set-psk","title":"Set PSK","text":"<p>After that, set the PSK to be used for the tunnel:</p> <pre><code># /etc/ipsec.d/zscaler.secrets\n# to use only one PSK for all connections:\n%any %any : PSK \"$sCAkcUwe434DwK4c54qBLw9H8G\"\n\n# to use the PSK for the connection to fra4-vpn.zscaler.net only:\nfra4-vpn.zscaler.net : PSK \"$sCAkcUwe434DwK4c54qBLw9H8G\"\n</code></pre>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#tunnel-basics","title":"Tunnel Basics","text":"<p> Libreswan ipsec.conf settings</p> <p> Libreswan configuration examples</p> <p> Zscaler IPSec parameters</p> <p> Zscaler Global Public Service Edge</p> <p>Important</p> <p><code>leftid</code> needs to be set to the VM public IP (this one should also be added to Zscaler Static IPs<sup>1</sup>)</p>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#route-based-vpn","title":"Route-based VPN","text":"<ul> <li> Creates tunnel interface <code>vti0</code></li> <li> A route-based VPN advertises <code>0.0.0.0/0</code> on both sides</li> <li> Disables <code>vti-routing</code> because we don't want to route <code>0.0.0.0/0</code> into the tunnel</li> <li> Marks the traffic - this mark could be used in <code>iptables</code> in <code>conntrack</code> rules</li> <li> Only traffic directly routed into the tunnel will be forwarded that way</li> <li> You need to manually add routes to route traffic into the tunnel: <code>ip route add 185.46.212.88 dev vti0</code></li> <li> Up/down script advantageous with <code>leftupdown</code> parameter to add/withdraw route according to <code>vti</code> state</li> </ul> <pre><code># /etc/ipsec.d/zscaler.conf\nconn zscaler\n    type=tunnel\n    authby=secret\n    auto=start\n    left=%defaultroute\n    leftid=45.123.234.123\n    leftsubnet=0.0.0.0/0\n    right=fra4-vpn.zscaler.net\n    rightsubnet=0.0.0.0/0\n    mark=5/0xffffffff\n    vti-interface=vti0\n    vti-routing=no\n    ikev2=yes\n    ike=aes256-sha2_256;dh14\n    ikelifetime=86400s\n    dpdaction=restart\n    dpdtimeout=20s\n    dpddelay=25s\n    nat-keepalive=yes\n    phase2=esp\n    esp=null-md5\n    salifetime=28800s\n</code></pre> <p>Tip</p> <p>In general, route-based vpn tunnels should be preferred to policy-based vpn tunnels. </p> <p>For example, route-based tunnels allow you to run routing protocols over the VPN connection. A very good article about the different types  here</p>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#policy-based-vpn","title":"Policy-based VPN","text":"<p>With policy-based VPNs, an IPSec policy is created to route destination <code>185.46.212.88</code> into the tunnel:</p> <p>No <code>vti</code> is created, no adding/removing routes in the routing table</p> <p>Configuration:</p> <p><pre><code># /etc/ipsec.d/zscaler.conf\nconn zscaler\n    type=tunnel\n    authby=secret\n    auto=start\n    left=%defaultroute\n    leftid=45.123.234.123\n    leftsubnet=0.0.0.0/0\n    right=fra4-vpn.zscaler.net\n    rightsubnet=185.46.212.88/32\n    mark=5/0xffffffff\n    ikev2=yes\n    ike=aes256-sha2_256;dh14\n    ikelifetime=86400s\n    dpdaction=restart\n    dpdtimeout=20s\n    dpddelay=25s\n    nat-keepalive=yes\n    phase2=esp\n    esp=null-md5\n    salifetime=28800s\n</code></pre> Check IPSec policy and state:</p> <pre><code># state\nsudo ip xfrm state\n\nsrc 165.225.112.12 dst 10.4.1.4\n    proto esp spi 0x3711f91f reqid 16389 mode tunnel\n    replay-window 32 flag af-unspec\n    auth-trunc hmac(md5) 0x3b2c9faf94007bc1efc94ca796b37d37 96\n    enc ecb(cipher_null)\n    encap type espinudp sport 4500 dport 4500 addr 0.0.0.0\n    anti-replay context: seq 0x3, oseq 0x0, bitmap 0x00000007\nsrc 10.4.1.4 dst 165.225.112.12\n    proto esp spi 0x5f1e1fd1 reqid 16389 mode tunnel\n    replay-window 32 flag af-unspec\n    auth-trunc hmac(md5) 0x18bd5dd32c12a72a4c2f5288ab287fe0 96\n    enc ecb(cipher_null)\n    encap type espinudp sport 4500 dport 4500 addr 0.0.0.0\n    anti-replay context: seq 0x0, oseq 0x3, bitmap 0x00000000\n\n# policy\nsudo ip xfrm pol\n\nsrc 0.0.0.0/0 dst 185.46.212.88/32\n    dir out priority 2097086\n    tmpl src 10.4.1.4 dst 165.225.112.12\n        proto esp reqid 16389 mode tunnel\nsrc 185.46.212.88/32 dst 0.0.0.0/0\n    dir fwd priority 2097086\n    tmpl src 165.225.112.12 dst 10.4.1.4\n        proto esp reqid 16389 mode tunnel\nsrc 185.46.212.88/32 dst 0.0.0.0/0\n    dir in priority 2097086\n    tmpl src 165.225.112.12 dst 10.4.1.4\n        proto esp reqid 16389 mode tunnel\n&lt;...&gt;\n</code></pre>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#enable-the-tunnel","title":"Enable the Tunnel","text":"<pre><code># enable and start service\nsudo systemctl enable ipsec.service\n\nsudo systemctl start ipsec.service\n\n# tail -f service logs\njournalctl -u ipsec -f\n\n# successful conneciton\npluto[1297]: listening for IKE messages\npluto[1297]: Kernel supports NIC esp-hw-offload\npluto[1297]: adding interface eth0/eth0 (esp-hw-offload not supported by kernel) 10.\npluto[1297]: adding interface eth0/eth0 10.4.1.4:4500\npluto[1297]: adding interface lo/lo (esp-hw-offload not supported by kernel) 127.0.\npluto[1297]: adding interface lo/lo 127.0.0.1:4500\npluto[1297]: adding interface lo/lo (esp-hw-offload not supported by kernel) [::1]\npluto[1297]: loading secrets from \"/etc/ipsec.secrets\"\npluto[1297]: loading secrets from \"/etc/ipsec.d/zscaler.secrets\"\npluto[1297]: \"zscaler\" #1: initiating IKEv2 IKE SA\npluto[1297]: \"zscaler\": local IKE proposals (IKE SA initiator selecting KE):\npluto[1297]: \"zscaler\":   1:IKE=AES_CBC_256-HMAC_SHA2_256-HMAC_SHA2_256_128-MODP2048\npluto[1297]: \"zscaler\" #1: STATE_PARENT_I1: sent v2I1, expected v2R1\npluto[1297]: \"zscaler\": local ESP/AH proposals (IKE SA initiator emitting ESP/AH \npluto[1297]: \"zscaler\":   1:ESP=NULL-HMAC_MD5_96-NONE-DISABLED\npluto[1297]: \"zscaler\" #2: STATE_PARENT_I2: sent v2I2, expected v2R2 {auth=IKEv2 8 prf=HMAC_SHA2_256 group=MODP2048}\npluto[1297]: \"zscaler\" #2: IKEv2 mode peer ID is ID_IPV4_ADDR: '165.225.112.12'\npluto[1297]: \"zscaler\" #2: Authenticated using authby=secret\npluto[1297]: \"zscaler\" #2: negotiated connection [0.0.0.0-255.255.255.255:0-65535 5 0]\npluto[1297]: \"zscaler\" #2: STATE_V2_IPSEC_I: IPsec SA established tunnel mode {ESP/NAT=&gt;0x6d394066 &lt;0xb319ec97 xfrm=NULL-HMAC_MD5_96 NATOA=none NATD=165.225.112.12:4500 DPD=active}\n</code></pre>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#troubleshooting-ipsec-tunnels","title":"Troubleshooting IPSec Tunnels","text":"<pre><code>sudo journalctl -u ipsec \n\nsudo ipsec whack --status\nsudo ipsec whack --trafficstatus\n\nsudo ip tunnel show\n\n\n# capture IPSec traffic only\nsudo tcpdump -ni eth0 esp or udp port 500 or udp port 4500\n\n# capture vti traffic (route-based)\nsudo tcpdump -ni vti0\n</code></pre>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#dnatsnat","title":"DNAT/SNAT","text":"<pre><code>sudo iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 10101 -j DNAT --to-destination 185.46.212.88:10101\nsudo iptables -t nat -A POSTROUTING -d 185.46.212.88 -j MASQUERADE\n\n# make iptables rules persistent\n# non-interactive mode, saves currently applied rules\necho iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections\necho iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections\nsudo apt install iptables-persistent -y\n\n# list iptables rules of the NAT table:\nsudo iptables -nvL -t nat\n</code></pre> <p>The following happens here (example for route-based VPN):</p> <p>Incoming packet on <code>eth0</code> - <code>10.4.1.4</code> on port <code>10101</code> (internal PAC file <code>return \"PROXY 10.4.1.4:10101\"</code> statement)</p> <pre><code>source: 10.8.0.4:56780\ndestination: 10.4.1.4:10101 (eth0)\n</code></pre> <p>First <code>iptables</code> rule changes the destination to the remote tunnel IP (DNAT, <code>PREROUTING</code> chain)</p> <pre><code>source: 10.8.0.4:56780\ndestination: 185.46.212.88:10101 (remote VPN side)\n</code></pre> <p>Info</p> <p>Forwarding decision is taken here -&gt; destination interface is <code>vti0</code> according to the routing table (that's why we need to set the route)</p> <p>Second rule masquerades (SNATs, <code>POSTROUTING</code> chain) the packet behind the local interface (<code>eth0</code>) IP</p> <pre><code>source: 10.4.1.4:43210 (eth0)\ndestination: 185.46.212.88:10101 (remote VPN side)\n</code></pre> <p>Forward the packet into the VPN tunnel (out <code>vti0</code> interface)</p> <p>Conntrack<sup>2</sup> will keep track of the mapping of original and translated source/destination <code>IP:port</code> tuples</p> <p>Note</p> <p>This is the bare minimum <code>iptables</code> config and uses only NAT features. For an architectue deep dive for iptables check  here</p>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#ha","title":"HA","text":"<p>We can only use an internal Azure load balancer, and each VM needs its own public IP. </p> <p>In this setup, each server builds its own tunnels to Zscaler, and the load balancer distributes load from clients to the backend VMs. Both servers and the public IP resources should be allocated in different Availability Zones.</p> <p>On the ILB, set up a load balancing rule for TCP port <code>10101</code> to the backend VMs. Return the ILB frontend IP in the PAC file statement for the clients. Azure Load balancer will never SNAT, so client IPs are visible on the backend VMs (e.g. for <code>tcpdump</code> to capture)</p> <p></p>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#netdata-libreswan-monitoring","title":"Netdata Libreswan Monitoring","text":"<p>As a bonus, Netdata can natively monitor Libreswan tunnels uptime and bytes in/out</p> <p> https://learn.netdata.cloud/docs/data-collection/monitor-anything/Networking/Libreswan-IPSec-tunnels</p> <p>Add the netdata user to <code>/etc/sudoers.d/</code> to allow monitoring commands:</p> <pre><code># /etc/sudoers.d/netdata\nnetdata ALL = (root) NOPASSWD: /sbin/ipsec whack --status\nnetdata ALL = (root) NOPASSWD: /sbin/ipsec whack --trafficstatus\n\n# chmod the file\nsudo chmod 600 etc/sudoers.d/netdata\n</code></pre>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-ipsec/#costs","title":"Costs","text":"<p>Example Costs</p> <p>VM: <code>Standard_D2sv3</code> ~$90/month</p> <p>LB: SKU <code>Standard</code> ~25/month with 1TB traffic forwarding</p> <ol> <li> <p> Self-Provisioning of Static IP Addresses \u21a9</p> </li> <li> <p> Connection Tracking (conntrack): Design and Implementation Inside Linux Kernel \u21a9</p> </li> <li> <p> Conntrack tales - one thousand and one flows \u21a9</p> </li> <li> <p> IPSec based VPN using Libreswan \u21a9</p> </li> <li> <p> Configuring Dedicated Proxy Ports \u21a9</p> </li> <li> <p> Writing a PAC File \u21a9</p> </li> </ol>","tags":["zscaler","vpn","linux"]},{"location":"2023-07-04-az-zscaler-vpngw/","title":"Zscaler Tunnels on Azure - Part 1 - VPN Gateway","text":"<p>This post will look at how to build IPSec tunnels to Zscaler on Azure with Azure VPN Gateway. The complete Lab setup including notes is available  here as bicep files with additional notes and outputs.</p> <p>The target setup should provide the options to forward traffic to the Zscaler tunnels in a default route and non-default route environment.</p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#lab-files","title":"Lab files","text":"<p>Lab Notes  here</p> <p>The lab can be deployed with the following command:</p> <pre><code># dry run\naz deployment sub what-if --location 'westeurope' --template-file main.bicep\n\n# deploy\naz deployment sub create --location 'westeurope' --template-file main.bicep\n</code></pre> <p>Components that will be deployed:</p> <ul> <li>Resource Group</li> <li>2 Vnets (gateway and spoke)</li> <li>VPN Gateway with 2 local network gateways building tunnels to Zscaler locations Frankfurt and Amsterdam</li> <li>Bastion</li> <li>Test VMs in both subnets (Linux VM in gw subnet, Windows VM in spoke subnet)</li> <li>VMSS for DNAT with a load balancer in front</li> </ul>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#tunnel-and-zscaler-config","title":"Tunnel and Zscaler config","text":"","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#vpn-gateway","title":"VPN Gateway","text":"<p>IKEv2 parameters used (for Phase 2 AES IPSec encryption an extra license is needed<sup>1</sup>):</p> <pre><code>  connectionMode: 'Default'\n  connectionProtocol: 'IKEv2'\n  connectionType: 'IPsec'\n  dpdTimeoutSeconds: 20\n  ipsecPolicies: [\n    {\n      dhGroup: 'DHGroup2'\n      ikeEncryption: 'AES256'\n      ikeIntegrity: 'SHA256'\n      ipsecEncryption: 'None'\n      ipsecIntegrity: 'SHA256'\n      pfsGroup: 'None'\n      saDataSizeKilobytes: 102400000\n      saLifeTimeSeconds: 28800\n    }\n  ]\n</code></pre> <p>Full config:  vpngw.bicep</p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#zscaler","title":"Zscaler","text":"<p>The following needs to be created in the Zscaler portal:</p> <ul> <li>Static IPs (VPN gateway public IPs)</li> <li>VPN Credentials</li> <li>Location (static IPs and VPN credentials need to be referenced here)</li> </ul> <p></p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#default-route-environment","title":"Default Route Environment","text":"<p>You cannot configure <code>0.0.0.0/0</code> on the local network gateway, but the default route range can be divided into two prefixes that work: <code>0.0.0.0/1</code>, <code>128.0.0.0/1</code>. This will also be preferred over the system route for <code>0.0.0.0/0</code> to the internet because it's more specific. All traffic will be forwarded to the VPN Gateway</p> <pre><code>az network nic show-effective-route-table -n nic-vm-sp -g rg-zsc-vpngw -o table\n\nSource                 State    Address Prefix    Next Hop Type          Next Hop IP\n---------------------  -------  ----------------  ---------------------  -------------\nDefault                Active   10.8.0.0/16       VnetLocal\nDefault                Active   10.1.0.0/16       VNetPeering\nVirtualNetworkGateway  Active   0.0.0.0/1         VirtualNetworkGateway  10.1.0.6\nVirtualNetworkGateway  Active   0.0.0.0/1         VirtualNetworkGateway  10.1.0.7\nVirtualNetworkGateway  Active   128.0.0.0/1       VirtualNetworkGateway  10.1.0.6\nVirtualNetworkGateway  Active   128.0.0.0/1       VirtualNetworkGateway  10.1.0.7\nDefault                Active   0.0.0.0/0         Internet\n</code></pre> <p>For peered Vnets, the option <code>Use the remote virtual network's gateway or Route Server</code> needs to be active for the VPN routes to be advertised</p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#non-default-route-environment","title":"Non-Default Route Environment","text":"<p>In this setup, the  Zscaler Global Public Service Edge IPs will be announced on the local network gateway. Those are anycast IPs advertised in every Zscaler datacenter. </p> <p>Also, some form of DNAT is needed - either with a NVA firewall appliance (e.g. Fortigate) or a Linux NVA with iptables DNAT. The client IP will not be preserved with DNAT and only NVA IPs be visible in the Zscaler logs.</p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#linux-nva","title":"Linux NVA","text":"<p>DNAT/SNAT on Linux can easily be enabled with <code>iptables</code>. Packets reaching the NVA on a specific port (e.g. <code>10101</code> for a Zscaler Dedicated Proxy Port <sup>2</sup> or ports <code>80</code>, <code>443</code> )</p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#working-linux-settings","title":"Working Linux settings","text":"<p>Note</p> <p>This configuration will not survive a reboot</p> <pre><code>echo 1 &gt; /proc/sys/net/ipv4/ip_forward\niptables -t nat -A PREROUTING -p tcp -i eth0 --dport 10101 -j DNAT --to-destination 185.46.212.88:10101\niptables -t nat -A POSTROUTING -d 185.46.212.88 -j MASQUERADE\n</code></pre> <p>Info</p> <p>The first <code>iptables</code> rule changes the destination IP, the second rule changes the source IP to the VM NIC</p> <p>There is a lot more room to make the config more versatile, e.g. announce one Zscaler anycast IP per tunnel and use different ingress ports on the NVA. This way, traffic could be steered to the preferred tunnel via PAC file:</p> <pre><code>graph LR\n    A[\"PAC file: \"PROXY 10.1.1.4:10101\"\"] --&gt; B[NVA port 10101];\n    B ---|NVA routing decision| C[forward to 185.46.212.88:10101];\n    C --&gt; D[tunnel to FRA4];</code></pre> <pre><code>graph LR\n    A[\"PAC file: \"PROXY 10.1.1.4:8080\"\"] --&gt; B[NVA port 8080];\n    B ---|NVA routing decision| C[forward to 185.46.212.89:8080];\n    C --&gt; D[tunnel to AMS2];</code></pre> <p>Tip</p> <p>A PAC file also supports multiple proxy assignments, e.g. <code>return \"PROXY 10.1.1.4:10101; PROXY 10.1.1.4:10102; DIRECT\"</code>, so resiliency is not a problem.</p> <p>In this example, if the first proxy node is not reachable, it will fall back to the second one; if that's not reachable, traffic will go direct</p> <p>If SNAT port exhaustion is an issue, the <code>net.ipv4.ip_local_port_range</code> setting (see:  here) should be adjusted, or multiple ip addresses can be assigned to a NIC in Azure <sup>4</sup></p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#nva-provisioning","title":"NVA Provisioning","text":"<p>The Linux NVAs don't need much config, they are basically just a NAT gateway. However, to make the configuration easy and persistent across reboots, the VM can be provisioned with the correct settings with <code>cloud-init</code><sup>3</sup></p> <p><code>cloud-init</code> scripts can be added to Azure VMs during creation with the --custom-data switch (e.g. Lab repo  vmss.bicep)</p> <p>Sample <code>cloud-config.yml</code>:</p> <pre><code>#cloud-config\npackage_upgrade: true\nruncmd:\n  - echo 1 &gt; /proc/sys/net/ipv4/ip_forward\n  - echo 1 &gt; /proc/sys/net/ipv6/conf/all/forwarding\n  - iptables -t nat -A PREROUTING -p tcp -i eth0 --dport 10101 -j DNAT --to-destination 185.46.212.88:10101 -m comment --comment \"forward port 10101 traffic to zscaler\"\n  - iptables -t nat -A POSTROUTING -d 185.46.212.88 -j MASQUERADE -m comment --comment \"snat traffic to zscaler\"\n  - echo iptables-persistent iptables-persistent/autosave_v4 boolean true | debconf-set-selections\n  - echo iptables-persistent iptables-persistent/autosave_v6 boolean true | debconf-set-selections\n  - apt install iptables-persistent -y\n  - wget -O /tmp/netdata-kickstart.sh https://my-netdata.io/kickstart.sh &amp;&amp; sh /tmp/netdata-kickstart.sh --non-interactive\nwrite_file:\n  - path: /etc/sysctl.conf\n    content: |\n      net.ipv4.ip_forward=1\n      net.ipv6.conf.all.forwarding=1\n      net.ipv4.conf.all.accept_redirects = 0\n      net.ipv4.conf.all.send_redirects = 0\n    append: true\n</code></pre> <p>The config file will enable IP forwarding, set the <code>iptables</code>rules and make those persistent across reboots. Also,  Netdata will be installed for monitoring and is available at: <code>http://&lt;VMIP&gt;:19999</code></p> <p>IP forwarding also needs to be enabled on the network interface resource in Azure:</p> <p></p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#nva-as-vmss","title":"NVA as VMSS","text":"<p>The Linux NVA can also be deployed as a VMSS, with that we can achieve scalability (manual or autoscaling) and resiliency by placing instances in different AZs (see:  vmss.bicep#zones). For load balancing the VMSS, Azure Load Balancer will be used (see:  vmss.bicep#ilb resource)</p> <p>Note</p> <p>Currently <code>cloud-init</code> settings can not be updated on a deployed VMSS with CLI or Powershell <sup>5</sup>, so updating VMSS instances with new settings is probably best done with an OS image gallery and updating the image.</p>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#test","title":"Test","text":"<ul> <li>On spoke VM add the NVA IP as a proxy server:</li> </ul> <ul> <li>Check connectivity at <code>http://ip.zscaler.com</code>:</li> </ul> <p>A packet capture on the NVA confirms the NAT is working:</p> <pre><code>jo@vm-gwsn:~$ tcpdump -i eth0 'port 10101' \n\n17:53:16.490228 IP 185.46.212.88.10101 &gt; 10.1.1.4.57323: Flags [P.], seq 193959:193998, ack 2964, win 2113, length 39\n17:53:16.490241 IP 10.1.1.4.10101 &gt; 10.8.0.4.57323: Flags [P.], seq 193928:193959, ack 2964, win 2113, length 31\n17:53:16.490244 IP 10.1.1.4.10101 &gt; 10.8.0.4.57323: Flags [P.], seq 193959:193998, ack 2964, win 2113, length 39\n17:53:16.490723 IP 10.8.0.4.57323 &gt; 10.1.1.4.10101: Flags [P.], seq 2964:2999, ack 193928, win 2050, length 35\n17:53:16.490723 IP 10.8.0.4.57323 &gt; 10.1.1.4.10101: Flags [.], ack 193998, win 2050, length 0\n17:53:16.490739 IP 10.1.1.4.57323 &gt; 185.46.212.88.10101: Flags [P.], seq 2964:2999, ack 193928, win 2050, length 35\n17:53:16.490743 IP 10.1.1.4.57323 &gt; 185.46.212.88.10101: Flags [.], ack 193998, win 2050, length 0\n17:53:16.490850 IP 10.8.0.4.57323 &gt; 10.1.1.4.10101: Flags [P.], seq 2999:3038, ack 193998, win 2050, length 39\n17:53:16.490853 IP 10.1.1.4.57323 &gt; 185.46.212.88.10101: Flags [P.], seq 2999:3038, ack 193998, win 2050, length 39\n17:53:16.495014 IP 185.46.212.88.10101 &gt; 10.1.1.4.57323: Flags [.], ack 3038, win 2111, length 0\n17:53:16.495027 IP 10.1.1.4.10101 &gt; 10.8.0.4.57323: Flags [.], ack 3038, win 2111, length 0\n17:53:16.543674 IP 10.8.0.4.57327 &gt; 10.1.1.4.10101: Flags [P.], seq 3424:3463, ack 13642, win 2050, length 39\n17:53:16.543702 IP 10.1.1.4.57327 &gt; 185.46.212.88.10101: Flags [P.], seq 3424:3463, ack 13642, win 2050, length 39\n</code></pre>","tags":["zscaler","vpn"]},{"location":"2023-07-04-az-zscaler-vpngw/#costs","title":"Costs","text":"<p>Example Costs</p> <p>VPN Gateway: SKU <code>VpnGw2AZ</code> ~$400/month + traffic</p> <p>VMSS: 2x <code>Standard_D2sv3</code> ~245/month (other VM instance sizes should be tested)</p> <p>LB: SKU <code>Standard</code> ~20/month</p> <ol> <li> <p> Understanding IPSec VPNs \u21a9</p> </li> <li> <p> Configuring Dedicated Proxy Ports \u21a9</p> </li> <li> <p> cloud-init support for virtual machines in Azure \u21a9</p> </li> <li> <p> Assign multiple IP addresses to virtual machines using the Azure portal \u21a9</p> </li> <li> <p> Lab Notes - Linux NVA as VMSS \u21a9</p> </li> </ol>","tags":["zscaler","vpn"]},{"location":"2023-07-10-ipgroup-azfw-failed/","title":"Troubleshooting failed IP group that causes an AzureFirewall to fail","text":"<p>This is the documentation of a problem I encountered at work today, where updating an IP Group failed and caused the AzureFirewall policy associated with the IP Group to go into a 'Failed' state as well.</p> <p>In my recent case, this happened in a parent/child policy setup. Traffic was still forwarded correctly by the AzureFirewall.</p> <p>Update Oct. 2023</p> <p>This procedure also worked in cases where the parent policy (and one AzFW) failed without any ip group failures.</p> <p>General procedure:</p> <ul> <li>Disconnect child from failed parent policy</li> <li><code>PUT</code> operation to get the AzFW in 'Succeeded' state</li> <li><code>PUT</code> operation to get the parent policy in 'Succeeded' state</li> <li>If everyhting is in 'Succeeded' state, attach child to parent policy again</li> </ul>","tags":["azfw","ipgroup"]},{"location":"2023-07-10-ipgroup-azfw-failed/#environment","title":"Environment","text":"<ul> <li>Azure Virtual WAN Standard</li> <li>Secure Virtual Hubs with AzureFirewall Premium</li> <li>Parent (<code>AZ-GLOBAL-VHUB-AFW-POLICY</code>) and child (<code>AZ-NEUR-VHUB-AFW-POLICY</code>) policy associated with Vhub AzFW (<code>AzureFirewall_AZ-NEUR-VHUB01</code>)</li> <li>IP groups used in network rule collections of parent policy</li> </ul> <pre><code>graph\n    subgraph policies\n        gpol[AZ-GLOBAL-VHUB-AFW-POLICY] --&gt; npol[AZ-NEUR-VHUB-AFW-POLICY]\n        gpol --&gt; wpol[AZ-WEUR-VHUB-AFW-POLICY]\n        gpol --&gt; spol[AZ-SEA-VHUB-AFW-POLICY]\n    end\n    subgraph ipgroups\n        ipgr1([AZ-GLOBAL-IPGROUP-ISE-PSN]) --&gt; gpol\n        ipgr2([AZ-GLOBAL-IPGROUP-ISE-GUEST-PORTAL]) --&gt; gpol\n    end\n    subgraph firewalls\n        npol --&gt; nfw[[AzureFirewall_AZ-NEUR-VHUB01]]\n        wpol --&gt; wfw[[AzureFirewall_AZ-WEUR-VHUB01]]\n        spol --&gt; sfw[[AzureFirewall_AZ-SEA-VHUB01]]\n    end</code></pre>","tags":["azfw","ipgroup"]},{"location":"2023-07-10-ipgroup-azfw-failed/#problem-description","title":"Problem Description","text":"<p>When updating an IP Group with additional IP addresses, it somehow failed:</p> <p></p> <p><code>AZ-GLOBAL-VHUB-AFW-POLICY</code> is the parent policy and utilizes IP Groups in 'Failed' state and is not modifyable anymore. Updates to rule collections fail with the error message: <code>Put on Firewall Policy AZ-GLOBAL-VHUB-AFW-POLICY Failed with 1 faulted referenced firewalls</code></p> <p></p> <p>List of all IP Groups:</p> <pre><code>\u279c az network ip-group list -o table\n\nLocation    Name                                ProvisioningState    ResourceGroup\n----------  ----------------------------------  -------------------  ----------------------\nwesteurope  AZ-GLOBAL-IPGROUP-AGWS              Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-AV                Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-PRIVATEIPS        Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ISE-ALL           Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ISE-BCK           Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ISE-GUEST-PORTAL  Failed               AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ISE-MNT           Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ISE-PAN           Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ISE-PSN           Failed               AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ADDC-AZURE        Succeeded            AZ-GLOBAL-NETWORK-RG01\nwesteurope  AZ-GLOBAL-IPGROUP-ADDC-ONPREM       Succeeded            AZ-GLOBAL-NETWORK-RG01\n</code></pre> <p>List of all AzureFirewall resources:</p> <pre><code>\u279c az network firewall list -o table\n\nLocation       Name                          ProvisioningState    ResourceGroup\n-------------  ----------------------------  -------------------  ----------------------\nnortheurope    AzureFirewall_AZ-NEUR-VHUB01  Failed               az-global-network-rg01\nwesteurope     AzureFirewall_AZ-WEUR-VHUB01  Succeeded            AZ-GLOBAL-NETWORK-RG01\nsoutheastasia  AzureFirewall_AZ-SEA-VHUB01   Succeeded            AZ-GLOBAL-NETWORK-RG01\n</code></pre> <p>List of all AzureFirewall policies:</p> <pre><code>\u279c az network firewall policy list -o table\n\nLocation    Name                       ProvisioningState    ResourceGroup           ThreatIntelMode\n----------  -------------------------  -------------------  ----------------------  -----------------\nwesteurope  AZ-GLOBAL-VHUB-AFW-POLICY  Failed               AZ-GLOBAL-NETWORK-RG01  Alert\nwesteurope  AZ-NEUR-VHUB-AFW-POLICY    Succeeded            AZ-GLOBAL-NETWORK-RG01  Alert\nwesteurope  AZ-WEUR-VHUB-AFW-POLICY    Succeeded            AZ-GLOBAL-NETWORK-RG01  Alert\nwesteurope  AZ-SEA-VHUB-AFW-POLICY     Succeeded            AZ-GLOBAL-NETWORK-RG01  Deny\n</code></pre> <p>Note</p> <p><code>AZ-GLOBAL-VHUB-AFW-POLICY</code> (parent policy) and <code>AzureFirewall_AZ-NEUR-VHUB01</code> are failed, <code>AZ-SEA-VHUB-AFW-POLICY</code> (child policy) is succeeded</p>","tags":["azfw","ipgroup"]},{"location":"2023-07-10-ipgroup-azfw-failed/#resolving-the-failed-provisioning-state-for-all-resources","title":"Resolving the 'Failed' provisioning state for all resources","text":"<p>The main objective here should be to remove the failed IP Groups from the firewall policy and get all resources to 'Succeeded' provisioning state</p>","tags":["azfw","ipgroup"]},{"location":"2023-07-10-ipgroup-azfw-failed/#disconnect-parent-policy-from-child-policy-associated-with-the-failed-azfw-resource","title":"Disconnect parent policy from child policy associated with the failed AzFW resource","text":"<p>In our case, <code>AzureFirewall_NEUR-VHUB01</code> was the affected AzFW resource. </p> <p><code>AZ-GLOBAL-VHUB-AFW-POLICY</code> was disconnected from <code>AZ-NEUR-VHUB-AFW-POLICY</code> as the parent policy</p> <p></p> <p>Important</p> <p>The parent policy should now be modifyable again (Succeeded state)</p> <p>If the parent policy is still failed, a <code>PUT</code> operation<sup>1</sup> can be used to get to 'Succeeded' state:</p> <pre><code>Get-AzFirewall -Name \"AZ-GLOBAL-VHUB-AFW-POLICY\" -ResourceGroupName \"AZ-GLOBAL-NETWORK-RG01\" | Set-AzFirewall\n</code></pre> <p>In some cases this has to be done several times.</p>","tags":["azfw","ipgroup"]},{"location":"2023-07-10-ipgroup-azfw-failed/#unconfigure-failed-ip-groups-from-firewall-policy","title":"Unconfigure failed IP Groups from Firewall Policy","text":"<p>To remove the problematic IP Groups from the policy, IP Groups were replaced with the respective IP addresses/prefixes.</p> <p>This was successful, the failed IP Groups were not used anymore and the parent policy went into 'Succeeded' state</p> <p></p> <p>All resources - parent policy, child policy and firewall - should be in 'Succeeded' state by now</p>","tags":["azfw","ipgroup"]},{"location":"2023-07-10-ipgroup-azfw-failed/#connect-parent-and-child-policy","title":"Connect parent and child policy","text":"<p>The parent policy can now be associated to the child policy again</p> <p></p> <p>Important</p> <p>When re-connecting parent and child policy, different policy settings for TLS Inspection, IDPS, Threat Intelligence, DNS Proxy can cause the operation to fail. In this case, disconnect policies again, adjust settings, try again. I have not found an indicator or error message that could point me into the right direction to locate the problem here - I got it working through trial and error.</p>","tags":["azfw","ipgroup"]},{"location":"2023-07-10-ipgroup-azfw-failed/#final-thoughts","title":"Final Thoughts","text":"<p>I have to rethink if using IP Groups make sense to use. They seem to be a frequent cause of problems with firewall policies in my experience.</p> <p>Grouping IPs and other objects in firewall policies is such an essential and basic feature that it shouldn't be the cause of any problems, ever. </p> <ol> <li> <p> Troubleshoot Azure Microsoft.Network failed provisioning state \u21a9</p> </li> </ol>","tags":["azfw","ipgroup"]},{"location":"2023-10-26-qualys-azpolicy/","title":"Deploy Qualys Cloud Agent with Azure Policy","text":"<p>Qualys Cloud Agent is available as an Azure VM extension<sup>1</sup>. This makes mass-deployment of the agent with Azure Policy very enjoyable. This post will go through the components of the <code>DeployIfNotExists</code> policy, remediation and troubleshooting.</p> <p> Github Repo Link</p>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#prerequisites","title":"Prerequisites","text":"<ul> <li> Qualys License Code</li> <li> Windows and Linux Azure VMs for testing</li> <li> Read how VM extensions for Windows<sup>2</sup> and Linux<sup>3</sup> work</li> <li> Policy Definitions from the repo - </li> <li> Knowledge about ARM templates<sup>5</sup> and <code>DeployIfNotExists</code> policies<sup>4</sup></li> </ul> <p>Extension infos to be used in policies:</p> Windows Linux Agent name/type <code>QualysAgent</code> <code>QualysAgentLinux</code> Publisher <code>Qualys</code> <code>Qualys</code> typeHandlerVersion <code>3.1</code> <code>1.6</code> autoUpgradeMinorVersion <code>true</code> <code>true</code>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#policy-definitions","title":"Policy Definitions","text":"<p>The JSON definitions in the  Github Repo can be converted to Azure Policy Defintions with Powershell:</p> <pre><code>New-AzPolicyDefinition -Name 'Policyname' -DisplayName 'Displayname of the policy' -Policy './difne-linux-qualys.json'\n</code></pre>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#policy-evaluation","title":"Policy Evaluation","text":"<p>VMs can be tagged with <code>noqualysagent : true</code> to be ignored by this policy. The ignore tag key and value can be configured in policy parameters.</p> <p>Info</p> <p>The <code>osType</code> VM property is evaluated for agent install, this should be filtered by the supported OS list<sup>6</sup> from Qualys.</p> WindowsLinux <pre><code>\"if\": {\n        \"allOf\": [\n            {\n                \"field\": \"type\",\n                \"equals\": \"Microsoft.Compute/virtualMachines\"\n            },\n            {\n                \"field\": \"Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType\",\n                \"equals\": \"Windows\"\n            },\n            {\n                \"anyOf\": [\n                    {\n                        \"field\": \"[concat('tags[', parameters('excludetagname'), ']')]\",\n                        \"exists\": false\n                    },\n                    {\n                        \"field\": \"[concat('tags[', parameters('excludetagname'), ']')]\",\n                        \"notEquals\": \"[parameters('excludetagvalue')]\"\n                    }\n                ]\n            }\n        ]\n    }\n</code></pre> <pre><code>\"if\": {\n        \"allOf\": [\n            {\n                \"field\": \"type\",\n                \"equals\": \"Microsoft.Compute/virtualMachines\"\n            },\n            {\n                \"field\": \"Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType\",\n                \"like\": \"Linux*\"\n            },\n            {\n                \"anyOf\": [\n                    {\n                        \"field\": \"[concat('tags[', parameters('excludetagname'), ']')]\",\n                        \"exists\": false\n                    },\n                    {\n                        \"field\": \"[concat('tags[', parameters('excludetagname'), ']')]\",\n                        \"notEquals\": \"[parameters('excludetagvalue')]\"\n                    }\n                ]\n            }\n        ]\n    }\n</code></pre>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#policy-effect","title":"Policy Effect","text":"<p>Please read about the <code>DeployIfNotExists</code> policy effect and the properties used<sup>4</sup></p> <p>With <code>existenceCondition</code> we can check for child resources of <code>Microsoft.Compute/virtualMachines</code>, such as <code>Microsoft.Compute/virtualMachines/extensions</code>. If the condition is met (i.e. the extension is already successfully installed), the ARM template deployment will be skipped.</p> <p><code>evaluationDelay</code> specifies the time after VM deployment until the policy triggers.</p> WindowsLinux <pre><code>\"then\": {\n        \"effect\": \"[parameters('effect')]\",\n        \"details\": {\n            \"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n            \"name\": \"QualysAgent\",\n            \"roleDefinitionIds\": [\n                \"/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c\"//(1)!\n            ],\n            \"evaluationDelay\": \"AfterProvisioning\",\n            \"existenceCondition\": {\n                \"allOf\": [\n                    {\n                        \"field\": \"Microsoft.Compute/virtualMachines/extensions/type\",\n                        \"equals\": \"QualysAgent\"\n                    },\n                    {\n                        \"field\": \"Microsoft.Compute/virtualMachines/extensions/publisher\",\n                        \"equals\": \"Qualys\"\n                    },\n                    {\n                        \"field\": \"Microsoft.Compute/virtualMachines/extensions/provisioningState\",\n                        \"equals\": \"Succeeded\"\n                    }\n                ]\n            },\n            \"deployment\": {\n                  ...\n            }\n        }\n    }\n</code></pre> <ol> <li>The property <code>roleDefinitionIds</code> is described here</li> </ol> <pre><code>\"then\": {\n        \"effect\": \"[parameters('effect')]\",\n        \"details\": {\n            \"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n            \"name\": \"QualysAgentLinux\",\n            \"roleDefinitionIds\": [\n                \"/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c\"//(1)!\n            ],\n            \"evaluationDelay\": \"AfterProvisioning\",\n            \"existenceCondition\": {\n                \"allOf\": [\n                    {\n                        \"field\": \"Microsoft.Compute/virtualMachines/extensions/type\",\n                        \"equals\": \"QualysAgentLinux\"\n                    },\n                    {\n                        \"field\": \"Microsoft.Compute/virtualMachines/extensions/publisher\",\n                        \"equals\": \"Qualys\"\n                    },\n                    {\n                        \"field\": \"Microsoft.Compute/virtualMachines/extensions/provisioningState\",\n                        \"equals\": \"Succeeded\"\n                    }\n                ]\n            },\n            \"deployment\": {\n                  ...\n            }\n        }\n    }\n</code></pre> <ol> <li>The property <code>roleDefinitionIds</code> is described here</li> </ol>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#arm-template-deployment","title":"ARM Template Deployment","text":"<p>Qualys also provides an ARM template for agent deployment on  Github. That template can be slightly modified and used to deploy the agent with the policy.</p> WindowsLinux <pre><code>\"deployment\": {\n    \"properties\": {\n        \"mode\": \"incremental\",\n        \"parameters\": {//(1)!\n            \"vmName\": {\n                \"value\": \"[field('name')]\"\n            },\n            \"location\": {\n                \"value\": \"[field('location')]\"\n            },\n            \"licensecode\": {\n                \"value\": \"[parameters('licensecode')]\"\n            }\n        },\n        \"template\": {\n            \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n            \"contentVersion\": \"1.0.0.0\",\n            \"parameters\": {\n                \"vmName\": {\n                    \"type\": \"string\"\n                },\n                \"location\": {\n                    \"type\": \"string\"\n                },\n                \"licensecode\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"resources\": [\n                {\n                    \"apiVersion\": \"2019-07-01\",\n                    \"name\": \"[concat(parameters('vmName'), '/QualysAgent')]\",//(2)!\n                    \"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n                    \"location\": \"[parameters('location')]\",\n                    \"properties\": {\n                        \"publisher\": \"Qualys\",\n                        \"type\": \"QualysAgent\",\n                        \"autoUpgradeMinorVersion\": true,\n                        \"typeHandlerVersion\": \"3.1\",\n                        \"settings\": {\n                            \"LicenseCode\": \"[parameters('licensecode')]\"\n                        },\n                        \"protectedSettings\": {}\n                    }\n                }\n            ]\n        }\n    }\n}\n</code></pre> <ol> <li>Parameters passed from the policy to the ARM template</li> <li>The <code>name</code> property has to be <code>{vmName}/QualysAgent</code>. <code>vmName</code> will be passed by the policy through parameters (see  full policy definition) to the template</li> </ol> <pre><code>\"deployment\": {\n    \"properties\": {\n        \"mode\": \"incremental\",\n        \"parameters\": {//(1)!\n            \"vmName\": {\n                \"value\": \"[field('name')]\"\n            },\n            \"location\": {\n                \"value\": \"[field('location')]\"\n            },\n            \"licensecode\": {\n                \"value\": \"[parameters('licensecode')]\"\n            }\n        },\n        \"template\": {\n            \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n            \"contentVersion\": \"1.0.0.0\",\n            \"parameters\": {\n                \"vmName\": {\n                    \"type\": \"string\"\n                },\n                \"location\": {\n                    \"type\": \"string\"\n                },\n                \"licensecode\": {\n                    \"type\": \"string\"\n                }\n            },\n            \"resources\": [\n                {\n                    \"apiVersion\": \"2019-07-01\",\n                    \"name\": \"[concat(parameters('vmName'), '/QualysAgentLinux')]\",//(2)!\n                    \"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n                    \"location\": \"[parameters('location')]\",\n                    \"properties\": {\n                        \"publisher\": \"Qualys\",\n                        \"type\": \"QualysAgentLinux\",\n                        \"autoUpgradeMinorVersion\": true,\n                        \"typeHandlerVersion\": \"1.6\",\n                        \"settings\": {\n                            \"LicenseCode\": \"[parameters('licensecode')]\"\n                        },\n                        \"protectedSettings\": {}\n                    }\n                }\n            ]\n        }\n    }\n}\n</code></pre> <ol> <li>Parameters passed from the policy to the ARM template</li> <li>The <code>name</code> property has to be <code>{vmName}/QualysAgentLinux</code>. <code>vmName</code> will be passed by the policy through parameters (see  full policy definition) to the template</li> </ol>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#policy-assignment","title":"Policy Assignment","text":"<p>Important</p> <p>After assigning the Policy Definition, the policy will evaluate newly created resources based on the defined criteria and deploy the agent if the conditions are met. Existing resources have to be remediated with a remediation task manually.</p> <p>Even when the extension is manually uninstalled after deployment, the policy will not remediate (reinstall the extension) automatically. A remediation task has to be used, the VM will be marked as non-compliant though</p>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#create-the-policy-assignment","title":"Create the Policy Assignment","text":"<ol> <li>Create the assignment and set scope</li> <li>Specify required parameters </li> <li>Specify managed identity, don't create a remediation task yet </li> </ol>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#managed-identity-and-rbac","title":"Managed Identity and RBAC","text":"<p><code>DeployIfNotExists</code> policies require a managed identity to be created. The managed identity is assigned the permissions defined in the <code>roleDefinitionIds</code> property.</p> <p>In this case, <code>/providers/microsoft.authorization/roleDefinitions/9980e02c-c2be-4d73-94e8-173b1dc7cf3c</code> is the ID of the built-in <code>Virtual Machine Contributor</code> role, see  AzRoleAdvertizer - Virtual Machine Contributor</p> <p>RBAC custom roles can also be created and used, the minimum permissions needed are:</p> <pre><code>Microsoft.Resources/deployments/read\nMicrosoft.Resources/deployments/write \nMicrosoft.Resources/deployments/validate/action\nMicrosoft.Resources/deployments/operations/read\nMicrosoft.Resources/deployments/operationstatuses/read\n\nMicrosoft.Compute/virtualMachines/extensions/read\nMicrosoft.Compute/virtualMachines/extensions/write\n</code></pre>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#remediation-task","title":"Remediation Task","text":"<ol> <li> <p>To remediate existing resources, create a remediation task. Choose the policy assignment to remediate: </p> </li> <li> <p>The task should show the resources that need remediation on the bottom, if the evaluation has not happened, check the <code>Re-evaluate resource compliance before remediating</code>. The remediation task with re-evaluation enabled takes about ~15-30min longer to complete </p> </li> <li> <p>When the task is completed, it shows succeeded and failed resources </p> </li> </ol>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#deployment-success","title":"Deployment Success","text":"<ul> <li> Extension status is <code>Provisioning Succeeded</code>:</li> </ul> <ul> <li> Server is visible in the Qualys Portal:</li> </ul>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#troubleshooting-deployment-errors","title":"Troubleshooting Deployment Errors","text":"<p>Deployment errors are displayed in the remediation task. In the example below, <code>Rocky Linux</code> is not supported by the agent. Besides not supported OS versions, VMs that are powered off will fail.</p> <p>If encountering problems with the agent, you might want to take a look at the agent logs</p> Example: Rocky Linux not supported <p></p> <p>Checking the install script mentioned in the error message shows the following regex:</p> <p></p> <p>The install script (<code>/var/lib/waagent/Qualys.QualysAgentLinux-1.6.1.4/bin/avme_install.sh</code>) will check for <code>/etc/redhat-release</code> and match to a regex. This regex does currently not include <code>Rocky Linux</code>. The problem will be fixed in December 2023 according to Qualys</p>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#deploy-extension-with-azcli","title":"Deploy extension with AzCLI","text":"<p>List VM extensions available:</p> <pre><code>\u279c az vm extension image list --publisher Qualys --latest -o table\n\nName                              Publisher                      Version\n--------------------------------  -----------------------------  ---------\nQualysAgentGL                     Qualys.WindowsAgent.GrayLabel  1.0.0.2\nLinuxAgent.AzureSecurityCenter    Qualys                         1.0.0.17\nQualysAgentGL                     Qualys.LinuxAgent.GrayLabel    1.0.0.2\nQualysAgent                       Qualys                         3.1.3.34\nQualysAgentLinux                  Qualys                         1.6.1.4\nWindowsAgent.AzureSecurityCenter  Qualys                         1.0.0.21\n</code></pre> <p>Install extension with AzCLI:</p> <pre><code>\u279c az vm extension set --publisher Qualys --name QualysAgentLinux --settings '{\"LicenseCode\": \"LICENSECODE\"}' --ids \"/subscriptions/SUBSCRIPTIONID/resourceGroups/RGNAME/providers/Microsoft.Compute/virtualMachines/VMNAME\"\n\n{\n  \"autoUpgradeMinorVersion\": true,\n  \"enableAutomaticUpgrade\": null,\n  \"forceUpdateTag\": null,\n  \"id\": \"/subscriptions/SUBSCRIPTIONID/resourceGroups/RGNAME/providers/Microsoft.Compute/virtualMachines/VMNAME/extensions/QualysAgentLinux\",\n  \"instanceView\": null,\n  \"location\": \"westeurope\",\n  \"name\": \"QualysAgentLinux\",\n  \"protectedSettings\": null,\n  \"protectedSettingsFromKeyVault\": null,\n  \"provisioningState\": \"Succeeded\",\n  \"publisher\": \"Qualys\",\n  \"resourceGroup\": \"RGNAME\",\n  \"settings\": {\n    \"LicenseCode\": \"LICENSECODE\"\n  },\n  \"suppressFailures\": null,\n  \"tags\": null,\n  \"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n  \"typeHandlerVersion\": \"1.6\",\n  \"typePropertiesType\": \"QualysAgentLinux\"\n}\n</code></pre>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"2023-10-26-qualys-azpolicy/#agent-logs","title":"Agent Logs","text":"WindowsLinux <p>Agent logs can be found in <code>C:\\WindowsAzure\\Logs\\Qualys.QualysAgent\\3.1.3.34\\Asclog.txt</code></p> <p>Agent installer is located in <code>C:\\Packages\\Plugins\\Qualys.QualysAgent\\3.1.3.34\\</code></p> <p>Agent Logs: <code>/var/log/qualys/qualys-cloud-agent.log</code></p> <p>Extension Logs: <code>/var/log/azure/Qualys.QualysAgentLinux/lxagent.log</code></p> <p>Install directory: <code>/usr/local/qualys/cloud-agent/bin</code></p> <p>Install script: <code>/var/lib/waagent/Qualys.QualysAgentLinux-1.6.1.4/bin/avme_install.sh</code></p> <p>Config files: <code>/etc/qualys/cloud-agent/</code></p> <ol> <li> <p> Azure virtual machine extensions and features \u21a9</p> </li> <li> <p> Virtual machine extensions and features for Windows \u21a9</p> </li> <li> <p> Virtual machine extensions and features for Linux \u21a9</p> </li> <li> <p> Understand Policy Effects \u21a9\u21a9</p> </li> <li> <p> What are ARM templates? \u21a9</p> </li> <li> <p> Cloud Agent Platform Availability Matrix \u21a9</p> </li> </ol>","tags":["azure-policy","vm-extensions","qualys"]},{"location":"archive/2023/","title":"2023","text":""},{"location":"category/troubleshooting/","title":"troubleshooting","text":""},{"location":"category/how-to/","title":"how-to","text":""},{"location":"category/lab/","title":"lab","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#azfw","title":"azfw","text":"<ul> <li>Troubleshooting failed IP group that causes an AzureFirewall to fail</li> </ul>"},{"location":"tags/#azure-policy","title":"azure-policy","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> <li>Deploy Qualys Cloud Agent with Azure Policy</li> </ul>"},{"location":"tags/#dsc","title":"dsc","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> </ul>"},{"location":"tags/#guestconfiguration","title":"guestconfiguration","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> </ul>"},{"location":"tags/#ipgroup","title":"ipgroup","text":"<ul> <li>Troubleshooting failed IP group that causes an AzureFirewall to fail</li> </ul>"},{"location":"tags/#linux","title":"linux","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> <li>Azure VM Agent and Extension Logs</li> <li>Zscaler Tunnels on Azure - Part 2 - Linux IPSec</li> </ul>"},{"location":"tags/#qualys","title":"qualys","text":"<ul> <li>Deploy Qualys Cloud Agent with Azure Policy</li> </ul>"},{"location":"tags/#vm-extensions","title":"vm-extensions","text":"<ul> <li>Azure Policy Guest Configuration for Linux - Part 1</li> <li>Azure Policy Guest Configuration for Linux - Part 2</li> <li>Azure VM Agent and Extension Logs</li> <li>Deploy Qualys Cloud Agent with Azure Policy</li> </ul>"},{"location":"tags/#vpn","title":"vpn","text":"<ul> <li>Zscaler Tunnels on Azure - Part 2 - Linux IPSec</li> <li>Zscaler Tunnels on Azure - Part 1 - VPN Gateway</li> </ul>"},{"location":"tags/#zscaler","title":"zscaler","text":"<ul> <li>Zscaler Tunnels on Azure - Part 2 - Linux IPSec</li> <li>Zscaler Tunnels on Azure - Part 1 - VPN Gateway</li> </ul>"}]}